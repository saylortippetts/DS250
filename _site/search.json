[
  {
    "objectID": "class/proj 5.html",
    "href": "class/proj 5.html",
    "title": "Chaz Clark - Data Science Portfolio",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "class/proj_5.html",
    "href": "class/proj_5.html",
    "title": "Chaz Clark - Data Science Portfolio",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "250_projects.html",
    "href": "250_projects.html",
    "title": "DS250 Projects",
    "section": "",
    "text": "Project 3 - Late Flights and Missing Data (JSON)\nProject 4 - Can you Predict That?\nProject 5 - The War with StarWars",
    "crumbs": [
      "DS250 Projects"
    ]
  },
  {
    "objectID": "250_projects.html#repo-for-my-projects",
    "href": "250_projects.html#repo-for-my-projects",
    "title": "DS250 Projects",
    "section": "",
    "text": "Project 3 - Late Flights and Missing Data (JSON)\nProject 4 - Can you Predict That?\nProject 5 - The War with StarWars",
    "crumbs": [
      "DS250 Projects"
    ]
  },
  {
    "objectID": "Templates/ds250_coding_challenge_template.html",
    "href": "Templates/ds250_coding_challenge_template.html",
    "title": "Coding Challenge",
    "section": "",
    "text": "Show the code\n# Read in libraries\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Read in the names data\nurl = \"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\"\nnames = pd.read_csv(url)"
  },
  {
    "objectID": "Templates/ds250_coding_challenge_template.html#question",
    "href": "Templates/ds250_coding_challenge_template.html#question",
    "title": "Coding Challenge",
    "section": "Question #:",
    "text": "Question #:\n\n[Replace with the text from question #]\n\n\nShow the code\n# Question # Code\n\n\nWhen done with a question, render it to a .html file and upload it for the question. Either re-downolad this template or file -&gt; save as -&gt; a new file name and then replace the text in the question with the new question text."
  },
  {
    "objectID": "class/e.html",
    "href": "class/e.html",
    "title": "Chaz Clark - Data Science Portfolio",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "250_Projects/project3.html",
    "href": "250_Projects/project3.html",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "",
    "text": "Show the code\nimport pandas as pd \nimport numpy as np\nimport sqlite3\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\nsqlite_file = 'lahmansbaseballdb.sqlite'\n# this file must be in the same location as your .qmd or .py file\ncon = sqlite3.connect(sqlite_file)",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#elevator-pitch",
    "href": "250_Projects/project3.html#elevator-pitch",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#questiontask-1",
    "href": "250_Projects/project3.html#questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nWrite an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#questiontask-2",
    "href": "250_Projects/project3.html#questiontask-2",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nThis three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)\na. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.\na. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.\na. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#questiontask-3",
    "href": "250_Projects/project3.html#questiontask-3",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nPick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#stretch-questiontask-1",
    "href": "250_Projects/project3.html#stretch-questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nAdvanced Salary Distribution by Position (with Case Statement):\n* Write an SQL query that provides a summary table showing the average salary for players in each position (e.g., pitcher, catcher, outfielder) across all years. Include the following columns:\n\n    * position\n    * average_salary\n    * total_players\n    * highest_salary  \n\n* The highest_salary column should display the highest salary ever earned by a player in that position. If no player in that position has a recorded salary, display “N/A” for the highest salary.  \n\n* Additionally, create a new column called salary_category using a case statement:  \n\n    * If the average salary is above $1 million, categorize it as “High Salary.”  \n    * If the average salary is between $500,000 and $1 million, categorize it as “Medium Salary.”  \n    * Otherwise, categorize it as “Low Salary.”  \n\n* Order the table by average salary in descending order.\n* Print the top 10 rows of this summary table.  \ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#stretch-questiontask-2",
    "href": "250_Projects/project3.html#stretch-questiontask-2",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nAdvanced Career Longevity and Performance (with Subqueries):\n* Calculate the average career length (in years) for players who have played at least one game. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their:  \n\n    * playerID\n    * first_name\n    * last_name\n    * career_length\n\n* The career_length should be calculated as the difference between the maximum and minimum yearID for each player. \ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project4.html",
    "href": "250_Projects/project4.html",
    "title": "Client Report - Can You Predict That?",
    "section": "",
    "text": "Show the code\nimport pandas as pd \nimport numpy as np\nfrom lets_plot import *\n# add the additional libraries you need to import for ML here\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#elevator-pitch",
    "href": "250_Projects/project4.html#elevator-pitch",
    "title": "Client Report - Can You Predict That?",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-1",
    "href": "250_Projects/project4.html#questiontask-1",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nCreate 2-3 charts that evaluate potential relationships between the home variables and before1980. Explain what you learn from the charts that could help a machine learning algorithm.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-2",
    "href": "250_Projects/project4.html#questiontask-2",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nBuild a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-3",
    "href": "250_Projects/project4.html#questiontask-3",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nJustify your classification model by discussing the most important features selected by your model. This discussion should include a feature importance chart and a description of the features.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-4",
    "href": "250_Projects/project4.html#questiontask-4",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nDescribe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#stretch-questiontask-1",
    "href": "250_Projects/project4.html#stretch-questiontask-1",
    "title": "Client Report - Can You Predict That?",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nRepeat the classification model using 3 different algorithms. Display their Feature Importance, and Decision Matrix. Explian the differences between the models and which one you would recommend to the Client.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#stretch-questiontask-2",
    "href": "250_Projects/project4.html#stretch-questiontask-2",
    "title": "Client Report - Can You Predict That?",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nJoin the dwellings_neighborhoods_ml.csv data to the dwelling_ml.csv on the parcel column to create a new dataset. Duplicate the code for the stretch question above and update it to use this data. Explain the differences and if this changes the model you recomend to the Client.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#stretch-questiontask-3",
    "href": "250_Projects/project4.html#stretch-questiontask-3",
    "title": "Client Report - Can You Predict That?",
    "section": "STRETCH QUESTION|TASK 3",
    "text": "STRETCH QUESTION|TASK 3\nCan you build a model that predicts the year a house was built? Explain the model and the evaluation metrics you would use to determine if the model is good.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project6.html",
    "href": "250_Projects/project6.html",
    "title": "Chaz Clark - Data Science Portfolio",
    "section": "",
    "text": "Here is a link to my GitHub portfolio: GitHub Portfolio\n\n\n\n\n Back to top"
  },
  {
    "objectID": "250_Projects/project5.html",
    "href": "250_Projects/project5.html",
    "title": "Client Report - The War with Star Wars",
    "section": "",
    "text": "Show the code\nimport pandas as pd\nimport numpy as np\nimport re\nfrom lets_plot import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL\n# Load the dataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv\",\n    encoding=\"ISO-8859-1\"\n)",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#elevator-pitch",
    "href": "250_Projects/project5.html#elevator-pitch",
    "title": "Client Report - The War with Star Wars",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nIn this project, I was able to analyze Star Wars survey data to explore fan demographics. The Empire Strikes Back was the most beloved film and most people think that Han shot first. I also was able to create a machine learning model to determine if a person earns more than 50K, and I reached 60% accuracy.",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-1",
    "href": "250_Projects/project5.html#questiontask-1",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nShorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.\nIn this portion, I just went ahead and cleaned up the cleaned up names. They are now simply all lowercased, with an underscore between each word.\n\n\nShow the code\n# Include and execute your code here\ndf.columns = [re.sub(r'[^a-zA-Z0-9_]', '', c.strip().lower().replace(\" \", \"_\")) for c in df.columns]\ndf.columns[:10]\n\n\nIndex(['respondentid',\n       'have_you_seen_any_of_the_6_films_in_the_star_wars_franchise',\n       'do_you_consider_yourself_to_be_a_fan_of_the_star_wars_film_franchise',\n       'which_of_the_following_star_wars_films_have_you_seen_please_select_all_that_apply',\n       'unnamed_4', 'unnamed_5', 'unnamed_6', 'unnamed_7', 'unnamed_8',\n       'please_rank_the_star_wars_films_in_order_of_preference_with_1_being_your_favorite_film_in_the_franchise_and_6_being_your_least_favorite_film'],\n      dtype='object')",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-2",
    "href": "250_Projects/project5.html#questiontask-2",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nClean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.\na. Filter the dataset to respondents that have seen at least one film\na. Create a new column that converts the age ranges to a single number. Drop the age range categorical column\na. Create a new column that converts the education groupings to a single number. Drop the school categorical column\na. Create a new column that converts the income ranges to a single number. Drop the income range categorical column\na. Create your target (also known as “y” or “label”) column based on the new income range column\na. One-hot encode all remaining categorical columns\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here\ndf = df[df['have_you_seen_any_of_the_6_films_in_the_star_wars_franchise'] == 'Yes']\n\n\n\n\nShow the code\n# Include and execute your code here\nage_map = {\"18-29\": 24, \"30-44\": 37, \"45-60\": 52, \"&gt; 60\": 65}\ndf['age_num'] = df['age'].map(age_map)\ndf.drop(columns=['age'], inplace=True)\n\n\n\n\nShow the code\n# Include and execute your code here\nedu_map = {\n    \"Less than high school degree\": 1,\n    \"High school degree\": 2,\n    \"Some college or Associate degree\": 3,\n    \"Bachelor degree\": 4,\n    \"Graduate degree\": 5,\n}\ndf['education_num'] = df['education'].map(edu_map)\ndf.drop(columns=['education'], inplace=True)\n\n\n\n\nShow the code\n# Include and execute your code here\nincome_map = {\n    \"$0 - $24,999\": 12500,\n    \"$25,000 - $49,999\": 37500,\n    \"$50,000 - $99,999\": 75000,\n    \"$100,000 - $149,999\": 125000,\n    \"$150,000+\": 175000,\n}\ndf['income_num'] = df['household_income'].map(income_map)\ndf.drop(columns=['household_income'], inplace=True)\n\n\n\n\nShow the code\n# Include and execute your code here\n\ndf['income_gt_50k'] = (df['income_num'] &gt; 50000).astype(int)\n\n\n\n\nShow the code\n# Include and execute your code here\ncategorical_cols = [col for col in ['gender', 'location'] if col in df.columns]\ndf = pd.get_dummies(df, columns=categorical_cols, drop_first=True)",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-3",
    "href": "250_Projects/project5.html#questiontask-3",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nValidate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.\nI used ggPlot to recreate the “Who Shot First” graph and “Whats the best Star Wars movie?” graph.\n\n\nShow the code\ndata = pd.DataFrame({\n    'response': [\"Han\", \"Greedo\", \"I don't understand this question\"],\n    'percent': [39, 24, 37]\n})\nggplot(data) + \\\n    geom_bar(aes(y='response', x='percent'), stat='identity', fill='#1f77b4') + \\\n    ggtitle(\"Who Shot First?\") + \\\n    xlab(\"Percentage (%)\") + \\\n    ylab(\"\") + \\\n    theme_classic() + \\\n    theme(axis_title_y=element_blank()) + \\\n    ggsize(900, 300) \n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\n\nShow the code\nbest_movie = pd.DataFrame({\n    \"movie\": [\n        \"The Phantom Menace\",\n        \"Attack of the Clones\",\n        \"Revenge of the Sith\",\n        \"A New Hope\",\n        \"The Empire Strikes Back\",\n        \"Return of the Jedi\"\n    ],\n    \"percent\": [10, 4, 6, 27, 36, 17]\n})\n(\n    ggplot(best_movie) +\n    geom_bar(\n        aes(y=\"movie\", x=\"percent\"),\n        stat=\"identity\",\n        fill=\"#1f77b4\"\n    ) +\n    ggtitle(\"What's the Best 'Star Wars' Movie?\") +\n    xlab(\"Percentage (%)\") +\n    ylab(\"\") +\n    theme_classic() +\n    theme(\n        axis_title_y=element_blank(),\n        axis_text_y=element_text(size=10)\n    ) +\n    ggsize(700, 320)\n)",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-4",
    "href": "250_Projects/project5.html#questiontask-4",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nBuild a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.\nThis machine learning model that predicts the chances of a person making over 50K has 60% accuracy. \n\n\nShow the code\n# Include and execute your code here\ncat_cols = df.select_dtypes(include='object').columns\nprint(cat_cols)\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nfor col in cat_cols:\n    df[col] = le.fit_transform(df[col].astype(str))\nX = df.drop(columns=['income_num', 'income_gt_50k'])\ny = df['income_gt_50k']\n\nX = X.select_dtypes(include=[np.number])  # ensure all features are numeric\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier(\n    n_estimators=500,\n    max_depth=10,\n    min_samples_split=5,\n    class_weight='balanced',\n    random_state=42\n)\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n\nIndex(['have_you_seen_any_of_the_6_films_in_the_star_wars_franchise',\n       'do_you_consider_yourself_to_be_a_fan_of_the_star_wars_film_franchise',\n       'which_of_the_following_star_wars_films_have_you_seen_please_select_all_that_apply',\n       'unnamed_4', 'unnamed_5', 'unnamed_6', 'unnamed_7', 'unnamed_8',\n       'please_rank_the_star_wars_films_in_order_of_preference_with_1_being_your_favorite_film_in_the_franchise_and_6_being_your_least_favorite_film',\n       'unnamed_10', 'unnamed_11', 'unnamed_12', 'unnamed_13', 'unnamed_14',\n       'please_state_whether_you_view_the_following_characters_favorably_unfavorably_or_are_unfamiliar_with_himher',\n       'unnamed_16', 'unnamed_17', 'unnamed_18', 'unnamed_19', 'unnamed_20',\n       'unnamed_21', 'unnamed_22', 'unnamed_23', 'unnamed_24', 'unnamed_25',\n       'unnamed_26', 'unnamed_27', 'unnamed_28', 'which_character_shot_first',\n       'are_you_familiar_with_the_expanded_universe',\n       'do_you_consider_yourself_to_be_a_fan_of_the_expanded_universe',\n       'do_you_consider_yourself_to_be_a_fan_of_the_star_trek_franchise',\n       'location_census_region'],\n      dtype='object')\nAccuracy: 0.601063829787234\n              precision    recall  f1-score   support\n\n           0       0.63      0.54      0.58        97\n           1       0.58      0.67      0.62        91\n\n    accuracy                           0.60       188\n   macro avg       0.60      0.60      0.60       188\nweighted avg       0.61      0.60      0.60       188",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#stretch-questiontask-1",
    "href": "250_Projects/project5.html#stretch-questiontask-1",
    "title": "Client Report - The War with Star Wars",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nBuild a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#stretch-questiontask-2",
    "href": "250_Projects/project5.html#stretch-questiontask-2",
    "title": "Client Report - The War with Star Wars",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nValidate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here\n\nfrom plotnine import *\nprint(\"plotnine is installed and ready!\")\n\n\nplotnine is installed and ready!",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#stretch-questiontask-3",
    "href": "250_Projects/project5.html#stretch-questiontask-3",
    "title": "Client Report - The War with Star Wars",
    "section": "STRETCH QUESTION|TASK 3",
    "text": "STRETCH QUESTION|TASK 3\nCreate a new column that converts the location groupings to a single number. Drop the location categorical column.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "class/sd.html",
    "href": "class/sd.html",
    "title": "Chaz Clark - Data Science Portfolio",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html",
    "href": "Templates/ds250_project_template_clean.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "paste your elevator pitch here A SHORT (4-5 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS.\n\n\nRead and format project data\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#elevator-pitch",
    "href": "Templates/ds250_project_template_clean.html#elevator-pitch",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "paste your elevator pitch here A SHORT (4-5 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS.\n\n\nRead and format project data\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-1",
    "href": "Templates/ds250_project_template_clean.html#questiontask-1",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nCOPY PASTE QUESTION|TASK 1 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n(\n  ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n)\n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\nMy useless chart\n\n\n\n\ntable example\n# Include and execute your code here\nmydat = (df.head(1000)\n    .groupby('year')\n    .sum()\n    .reset_index()\n    .tail(10)\n    .filter([\"year\", \"AK\",\"AR\"])\n)\ndisplay(mydat)\n\n\n\n\n\n\nNot much of a table\n\n\n\nyear\nAK\nAR\n\n\n\n\n96\n2006\n21.0\n183.0\n\n\n97\n2007\n28.0\n153.0\n\n\n98\n2008\n36.0\n212.0\n\n\n99\n2009\n34.0\n179.0\n\n\n100\n2010\n22.0\n196.0\n\n\n101\n2011\n41.0\n148.0\n\n\n102\n2012\n28.0\n140.0\n\n\n103\n2013\n26.0\n134.0\n\n\n104\n2014\n20.0\n114.0\n\n\n105\n2015\n28.0\n121.0"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-2",
    "href": "Templates/ds250_project_template_clean.html#questiontask-2",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nCOPY PASTE QUESTION|TASK 2 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-3",
    "href": "Templates/ds250_project_template_clean.html#questiontask-3",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-4",
    "href": "Templates/ds250_project_template_clean.html#questiontask-4",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-5",
    "href": "Templates/ds250_project_template_clean.html#questiontask-5",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 5",
    "text": "QUESTION|TASK 5\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/DS250_Template.html",
    "href": "Templates/DS250_Template.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "THIS .qmd IS INSTRUCTIONAL AND SHOULD NOT BE USED TO WRITE YOUR REPORTS (EXCEPTION - PROJECT 0). THERE IS ANOTHER TEMPLATE FILE FOR THAT. YOU WILL NEED TO PREVIEW THE REPORT TO PRODUCE A .html FILE. YOU WILL SUBMIT THE .html FILE ON CANVAS."
  },
  {
    "objectID": "Templates/DS250_Template.html#elevator-pitch",
    "href": "Templates/DS250_Template.html#elevator-pitch",
    "title": "Client Report - [Insert Project Title]",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.\n\n\nRead and format project data\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n# Note: using the URL is the easiest way for the data to still work in GitHub\n# You may download the file and reference it by name but only if you save it in the same folder as your .qmd file\nurl = 'https://raw.githubusercontent.com/byuidatascience/data4python4ds/master/data-raw/mpg/mpg.csv'\ndf = pd.read_csv(url)\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-1",
    "href": "Templates/DS250_Template.html#questiontask-1",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 1",
    "text": "Question|Task 1\nCOPY PASTE QUESTION|TASK 1 FROM THE PROJECT HERE\nAdd details here to answer the question but NOT like an assignment Q&A. You need to write your answers as a consulting solution report. A Client needs to understand the answer, but also needs to understand the decisions that went into the answer (when applicable).\ninclude figures in chunks and discuss your findings in the figure.\n\nYOU SHOULD HAVE QUALITY WRITING THAT DESCRIBES YOUR CHARTS AND TABLES.\nWE HIGHLY RECOMMEND GRAMMARLY TO FIX YOUR SPELLING AND GRAMMAR. WRITING TAKES TIME TO BE CLEAR. SPEND THE TIME TO PRACITCE.\nYOU SHOULD HAVE QUALITY COMMENTS THAT DESCRIBES YOUR CODES. OFTEN CODEERS WORK IN TEAMS AND YOU NEED TO HAVE QUALTIY COMMENTS FOR YOUR TEAM AND YOURSELF. YOU MAY NEED TO REVISIT CODE YOU WROTE OVER A YEAR AGO, AND IF YOU DONT COMMENT IT NOW YOU WONT REMEMBER WHY YOU DID WHAT YOU DID.\n\n\n\nRead and format data\n# Include and execute your code here"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-2",
    "href": "Templates/DS250_Template.html#questiontask-2",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 2",
    "text": "Question|Task 2\nCOPY PASTE QUESTION|TASK 2 FROM THE PROJECT HERE\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\n\nplot example\n# Include and execute your code here\n\n(\n  ggplot(df.head(500), aes(x='displ', y='hwy')) + geom_point()\n)\n\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                2\n              \n            \n          \n          \n            \n            \n            \n              \n                3\n              \n            \n          \n          \n            \n            \n            \n              \n                4\n              \n            \n          \n          \n            \n            \n            \n              \n                5\n              \n            \n          \n          \n            \n            \n            \n              \n                6\n              \n            \n          \n          \n            \n            \n            \n              \n                7\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                15\n              \n            \n          \n          \n            \n              \n                20\n              \n            \n          \n          \n            \n              \n                25\n              \n            \n          \n          \n            \n              \n                30\n              \n            \n          \n          \n            \n              \n                35\n              \n            \n          \n          \n            \n              \n                40\n              \n            \n          \n          \n            \n              \n                45\n              \n            \n          \n        \n      \n    \n    \n      \n        hwy\n      \n    \n    \n      \n        displ\n      \n    \n    \n    \n  \n  \n  \n\nMy useless chart"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-3",
    "href": "Templates/DS250_Template.html#questiontask-3",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 3",
    "text": "Question|Task 3\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\n\nPROVIDE TABLES THAT HELP ADDRESS THE QUESTIONS AND TASKS (IF APPLICABLE).\n\n\n\ntable example\n# Include and execute your code here\nmydat = (df.head(1000)\n    .groupby('manufacturer')\n    .sum()\n    .reset_index()\n    .tail(10)\n    .filter([\"manufacturer\",\"displ\",\"cty\", \"hwy\"])\n)\n\ndisplay(mydat)\n\n\n\n\n\n\ntable example\n\n\n\nmanufacturer\ndispl\ncty\nhwy\n\n\n\n\n5\nhyundai\n34.0\n261\n376\n\n\n6\njeep\n36.6\n108\n141\n\n\n7\nland rover\n17.2\n46\n66\n\n\n8\nlincoln\n16.2\n34\n51\n\n\n9\nmercury\n17.6\n53\n72\n\n\n10\nnissan\n42.5\n235\n320\n\n\n11\npontiac\n19.8\n85\n132\n\n\n12\nsubaru\n34.4\n270\n358\n\n\n13\ntoyota\n100.4\n630\n847\n\n\n14\nvolkswagen\n60.9\n565\n789"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-4",
    "href": "Templates/DS250_Template.html#questiontask-4",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 4",
    "text": "Question|Task 4\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\n\nPROVIDE TABLES THAT HELP ADDRESS THE QUESTIONS AND TASKS (IF APPLICABLE).\n\n\n\ntable example\n# Include and execute your code here\n\n\nNote: Non executing Python Snippets include (3) ``` followed by (3) more ```, each on their own line. These are not single quotes, they are the key left of the number 1 key on the keyboard. The top row can include the language of code that is pasted inbetween the ``` marks.\nNote: These also work in Slack and it is expected they are used for any code shared in that app. No screen shots allowed."
  },
  {
    "objectID": "250_Projects/P3_template.html",
    "href": "250_Projects/P3_template.html",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "",
    "text": "Show the code\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_json(\"https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json\")"
  },
  {
    "objectID": "250_Projects/P3_template.html#elevator-pitch",
    "href": "250_Projects/P3_template.html#elevator-pitch",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nFrom this summary we can learn that November is the best time to travel. We can also learn that SLC has the least amount of delays by weather."
  },
  {
    "objectID": "250_Projects/P3_template.html#questiontask-1",
    "href": "250_Projects/P3_template.html#questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nFix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__\nIn this question, I did a simple filtering and relpacement in order to cleanly show “NaN” using df.replace.\n\n\nShow the code\nmissing_tokens = [\"\", \" \", \"NA\", \"N/A\", \"null\", None]\ndf.replace(missing_tokens, np.nan, inplace=True)\n\nfor col in df.columns:\n    if \"num_of_\" in col or \"minutes_delayed\" in col:\n        df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n\ndf[\"month\"] = df[\"month\"].replace({\"Febuary\": \"February\"})\n\none_row_json = (\n    df.sample(1)\n      .replace({np.nan: \"NaN\"})\n      .to_json(orient=\"records\", indent=2)\n)\n\none_row_json\n\n\n'[\\n  {\\n    \"airport_code\":\"SAN\",\\n    \"airport_name\":\"NaN\",\\n    \"month\":\"April\",\\n    \"year\":2009.0,\\n    \"num_of_flights_total\":6824,\\n    \"num_of_delays_carrier\":329.0,\\n    \"num_of_delays_late_aircraft\":484,\\n    \"num_of_delays_nas\":231,\\n    \"num_of_delays_security\":4,\\n    \"num_of_delays_weather\":26,\\n    \"num_of_delays_total\":1074,\\n    \"minutes_delayed_carrier\":15089.0,\\n    \"minutes_delayed_late_aircraft\":25543,\\n    \"minutes_delayed_nas\":7792.0,\\n    \"minutes_delayed_security\":126,\\n    \"minutes_delayed_weather\":2039,\\n    \"minutes_delayed_total\":50589\\n  }\\n]'"
  },
  {
    "objectID": "250_Projects/P3_template.html#questiontask-2",
    "href": "250_Projects/P3_template.html#questiontask-2",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nWhich airport has the worst delays? Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.\nFor this table, I decided to look into the avgerage delay hours by airport to be able to easily see which airport was doing the worst. I used lambda to do this.\n\n\nShow the code\nsummary = (\n    df.groupby(\"airport_code\", dropna=True)\n      .agg(\n          total_flights   = (\"num_of_flights_total\", \"sum\"),\n          avg_delay_mins  = (\"minutes_delayed_total\", \"mean\")\n      )\n      .assign(\n          avg_delay_hrs = lambda d: d.avg_delay_mins / 60\n      )\n      .drop(columns=\"avg_delay_mins\")\n      .sort_values(\"avg_delay_hrs\", ascending=False)\n)\n\nsummary.head()\n\n\n\n\n\n\n\n\n\ntotal_flights\navg_delay_hrs\n\n\nairport_code\n\n\n\n\n\n\nORD\n3597588\n7115.672854\n\n\nATL\n4430047\n6816.152273\n\n\nSFO\n1630945\n3352.334975\n\n\nDEN\n2513974\n3178.457197\n\n\nIAD\n851571\n1298.418939"
  },
  {
    "objectID": "250_Projects/P3_template.html#questiontask-3",
    "href": "250_Projects/P3_template.html#questiontask-3",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nWhat is the best month to fly if you want to avoid delays of any length? Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)\nI did he same type of averaging idea for this question, but I averaged by month. It can clearly be seen that the best month to go is in November, due to the low amount of delays comparatively.\n\n\nShow the code\n# Drop rows with missing months\nmonth_df = df.dropna(subset=[\"month\"])\n\nmonth_tbl = (\n    month_df.groupby(\"month\")\n      .agg(avg_delay_mins=(\"minutes_delayed_total\", \"mean\"))\n      .reset_index()\n)\n\n\nmonth_order = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n]\n\nmonth_tbl[\"month\"] = pd.Categorical(month_tbl[\"month\"], categories=month_order, ordered=True)\nmonth_tbl[\"avg_delay_hrs\"] = month_tbl[\"avg_delay_mins\"] / 60\nmonth_tbl = month_tbl.sort_values(\"month\")\n\nfrom lets_plot import *\n\nggplot(month_tbl) + \\\n    geom_bar(aes(x=\"month\", y=\"avg_delay_hrs\"), stat=\"identity\", fill=\"#1f77b4\") + \\\n    ggtitle(\"Average Delay Time by Month (in Hours)\") + \\\n    xlab(\"Month\") + ylab(\"Avg Delay (Hours)\") + \\\n    theme(axis_text_x=element_text(angle=45, hjust=1)) + \\\n    ggsize(700, 350)"
  },
  {
    "objectID": "250_Projects/P3_template.html#questiontask-4",
    "href": "250_Projects/P3_template.html#questiontask-4",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nAccording to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:\na. 100% of delayed flights in the Weather category are due to weather  \na. 30% of all delayed flights in the Late-Arriving category are due to weather  \na. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    \nThis analysis is able to take a deeper look into possible different weather delays that are not just severe. From this, we can see that ATL has the most delays. \n\n\nShow the code\n# Include and execute your code here\n# Make sure values are numeric\nfor col in [\"num_of_delays_weather\", \"num_of_delays_late_aircraft\", \"num_of_delays_nas\"]:\n    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n\n# Fill missing late aircraft delays with column mean\ndf[\"num_of_delays_late_aircraft\"].fillna(df[\"num_of_delays_late_aircraft\"].mean(), inplace=True)\n\n\n\n\nShow the code\n# Include and execute your code here\n\ndef compute_weather(row):\n    weather = row[\"num_of_delays_weather\"] or 0\n    late_aircraft = 0.30 * row[\"num_of_delays_late_aircraft\"]\n    \n\n    spring_summer = [\"April\", \"May\", \"June\", \"July\", \"August\"]\n    nas_pct = 0.40 if row[\"month\"] in spring_summer else 0.65\n    nas = nas_pct * (row[\"num_of_delays_nas\"] or 0)\n    \n    return weather + late_aircraft + nas\n\ndf[\"weather_all\"] = df.apply(compute_weather, axis=1)\n\n\n\n\nShow the code\n# Include and execute your code here\ndf[[\n    \"airport_code\", \"month\",\n    \"num_of_delays_weather\", \"num_of_delays_late_aircraft\", \"num_of_delays_nas\",\n    \"weather_all\"\n]].head()\n\n\n\n\n\n\n\n\n\nairport_code\nmonth\nnum_of_delays_weather\nnum_of_delays_late_aircraft\nnum_of_delays_nas\nweather_all\n\n\n\n\n0\nATL\nJanuary\n448\n-999\n4598\n3137.00\n\n\n1\nDEN\nJanuary\n233\n928\n935\n1119.15\n\n\n2\nIAD\nJanuary\n61\n1058\n895\n960.15\n\n\n3\nORD\nJanuary\n306\n2255\n5415\n4502.25\n\n\n4\nSAN\nJanuary\n56\n680\n638\n674.70"
  },
  {
    "objectID": "250_Projects/P3_template.html#questiontask-5",
    "href": "250_Projects/P3_template.html#questiontask-5",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 5",
    "text": "QUESTION|TASK 5\nUsing the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.\nSFO has the most delays from weather that are mild and severe.\n\n\nShow the code\n# Include and execute your code here\ndf[\"weather_delay_prop\"] = df[\"weather_all\"] / df[\"num_of_flights_total\"]\n\nweather_by_airport = (\n    df.groupby(\"airport_code\", dropna=True)\n      .agg(prop_weather_delay=(\"weather_delay_prop\", \"mean\"))\n      .reset_index()\n      .sort_values(\"prop_weather_delay\", ascending=False)\n)\n\nfrom lets_plot import *\n\n(ggplot(weather_by_airport) +\n geom_bar(aes(x=\"airport_code\",\n              y=\"prop_weather_delay\"),\n          stat=\"identity\",\n          fill=\"#1f77b4\") +\n ggtitle(\"Proportion of Flights Delayed by Weather (Severe + Mild)\") +\n xlab(\"Airport\") + ylab(\"Proportion delayed\") +\n theme(axis_text_x=element_text(angle=45, hjust=1)) +\n ggsize(700, 400))"
  },
  {
    "objectID": "250_Projects/P3_template.html#stretch-questiontask-1",
    "href": "250_Projects/P3_template.html#stretch-questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nWhich delay is the worst delay? Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here"
  }
]