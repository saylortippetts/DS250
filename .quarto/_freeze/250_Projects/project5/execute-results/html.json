{
  "hash": "4d17f6d26d69b124cf9f17fa62b32e08",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Client Report - The War with Star Wars\"\nsubtitle: \"Course DS 250\"\nauthor: \"Saylor Tippetts\"\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    title-block-banner: true\n    toc: true\n    toc-depth: 3\n    toc-location: body\n    number-sections: false\n    html-math-method: katex\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n        source: false\n        toggle: true\n        caption: See code\nexecute: \n  warning: false\n    \n---\n\n::: {#31bc13a8 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport re\nfrom lets_plot import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n:::\n\n\n::: {#6144f8d4 .cell execution_count=2}\n``` {.python .cell-code}\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL\n# Load the dataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv\",\n    encoding=\"ISO-8859-1\"\n)\n```\n:::\n\n\n## Elevator pitch\n_In this project, I was able to analyze Star Wars survey data to explore fan demographics. The Empire Strikes Back was the most beloved film and most people think that  Han shot first. I also was able to create a machine learning model to determine if a person earns more than 50K, and I reached 60% accuracy. _\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\n_In this portion, I just went ahead and cleaned up the cleaned up names. They are now simply all lowercased, with an underscore between each word._\n\n::: {#bae8f948 .cell execution_count=3}\n``` {.python .cell-code}\n# Include and execute your code here\ndf.columns = [re.sub(r'[^a-zA-Z0-9_]', '', c.strip().lower().replace(\" \", \"_\")) for c in df.columns]\ndf.columns[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nIndex(['respondentid',\n       'have_you_seen_any_of_the_6_films_in_the_star_wars_franchise',\n       'do_you_consider_yourself_to_be_a_fan_of_the_star_wars_film_franchise',\n       'which_of_the_following_star_wars_films_have_you_seen_please_select_all_that_apply',\n       'unnamed_4', 'unnamed_5', 'unnamed_6', 'unnamed_7', 'unnamed_8',\n       'please_rank_the_star_wars_films_in_order_of_preference_with_1_being_your_favorite_film_in_the_franchise_and_6_being_your_least_favorite_film'],\n      dtype='object')\n```\n:::\n:::\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\n_type your results and analysis here_\n\n::: {#4ed40ac1 .cell execution_count=4}\n``` {.python .cell-code}\n# Include and execute your code here\ndf = df[df['have_you_seen_any_of_the_6_films_in_the_star_wars_franchise'] == 'Yes']\n```\n:::\n\n\n::: {#f81908c8 .cell execution_count=5}\n``` {.python .cell-code}\n# Include and execute your code here\nage_map = {\"18-29\": 24, \"30-44\": 37, \"45-60\": 52, \"> 60\": 65}\ndf['age_num'] = df['age'].map(age_map)\ndf.drop(columns=['age'], inplace=True)\n```\n:::\n\n\n::: {#7056fc53 .cell execution_count=6}\n``` {.python .cell-code}\n# Include and execute your code here\nedu_map = {\n    \"Less than high school degree\": 1,\n    \"High school degree\": 2,\n    \"Some college or Associate degree\": 3,\n    \"Bachelor degree\": 4,\n    \"Graduate degree\": 5,\n}\ndf['education_num'] = df['education'].map(edu_map)\ndf.drop(columns=['education'], inplace=True)\n```\n:::\n\n\n::: {#94fde493 .cell execution_count=7}\n``` {.python .cell-code}\n# Include and execute your code here\nincome_map = {\n    \"$0 - $24,999\": 12500,\n    \"$25,000 - $49,999\": 37500,\n    \"$50,000 - $99,999\": 75000,\n    \"$100,000 - $149,999\": 125000,\n    \"$150,000+\": 175000,\n}\ndf['income_num'] = df['household_income'].map(income_map)\ndf.drop(columns=['household_income'], inplace=True)\n```\n:::\n\n\n::: {#95b67950 .cell execution_count=8}\n``` {.python .cell-code}\n# Include and execute your code here\n\ndf['income_gt_50k'] = (df['income_num'] > 50000).astype(int)\n```\n:::\n\n\n::: {#c6e4e69f .cell execution_count=9}\n``` {.python .cell-code}\n# Include and execute your code here\ncategorical_cols = [col for col in ['gender', 'location'] if col in df.columns]\ndf = pd.get_dummies(df, columns=categorical_cols, drop_first=True)\n```\n:::\n\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\n_I used ggPlot to recreate the \"Who Shot First\" graph and \"Whats the best Star Wars movie?\" graph._\n\n::: {#1faabef9 .cell execution_count=10}\n``` {.python .cell-code}\ndata = pd.DataFrame({\n    'response': [\"Han\", \"Greedo\", \"I don't understand this question\"],\n    'percent': [39, 24, 37]\n})\nggplot(data) + \\\n    geom_bar(aes(y='response', x='percent'), stat='identity', fill='#1f77b4') + \\\n    ggtitle(\"Who Shot First?\") + \\\n    xlab(\"Percentage (%)\") + \\\n    ylab(\"\") + \\\n    theme_classic() + \\\n    theme(axis_title_y=element_blank()) + \\\n    ggsize(900, 300) \n\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <style> html, body { margin: 0; padding: 0; } </style>\n       <script type=\"text/javascript\" data-lets-plot-script=\"library\" src=\"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.6.2/js-package/distr/lets-plot.min.js\"></script>\n   </head>\n   <body>\n          <div id=\"dgxwYv\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   const forceImmediateRender = false;\n   const responsive = false;\n   \n   let sizing = {\n       width_mode: \"MIN\",\n       height_mode: \"SCALED\",\n       width: null, \n       height: null \n   };\n   \n   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n   if (preferredWidth !== undefined) {\n       sizing = {\n           width_mode: 'FIXED',\n           height_mode: 'SCALED',\n           width: parseFloat(preferredWidth)\n       };\n   }\n   \n   const containerDiv = document.getElementById(\"dgxwYv\");\n   let fig = null;\n   \n   function renderPlot() {\n       if (fig === null) {\n           const plotSpec = {\n\"data\":{\n\"response\":[\"Han\",\"Greedo\",\"I don't understand this question\"],\n\"percent\":[39.0,24.0,37.0]\n},\n\"mapping\":{\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"response\"\n},{\n\"type\":\"int\",\n\"column\":\"percent\"\n}]\n},\n\"ggtitle\":{\n\"text\":\"Who Shot First?\"\n},\n\"guides\":{\n\"x\":{\n\"title\":\"Percentage (%)\"\n},\n\"y\":{\n\"title\":\"\"\n}\n},\n\"theme\":{\n\"name\":\"classic\",\n\"axis_title_y\":{\n\"blank\":true\n}\n},\n\"ggsize\":{\n\"width\":900.0,\n\"height\":300.0\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n\"x\":\"percent\",\n\"y\":\"response\"\n},\n\"data_meta\":{\n},\n\"fill\":\"#1f77b4\",\n\"orientation\":\"y\",\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"1\"\n};\n           fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing);\n       } else {\n           fig.updateView({});\n       }\n   }\n   \n   const renderImmediately = \n       forceImmediateRender || (\n           sizing.width_mode === 'FIXED' && \n           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n       );\n   \n   if (renderImmediately) {\n       renderPlot();\n   }\n   \n   if (!renderImmediately || responsive) {\n       // Set up observer for initial sizing or continuous monitoring\n       var observer = new ResizeObserver(function(entries) {\n           for (let entry of entries) {\n               if (entry.contentBoxSize && \n                   entry.contentBoxSize[0].inlineSize > 0) {\n                   if (!responsive && observer) {\n                       observer.disconnect();\n                       observer = null;\n                   }\n                   renderPlot();\n                   if (!responsive) {\n                       break;\n                   }\n               }\n           }\n       });\n       \n       observer.observe(containerDiv);\n   }\n   \n   // ----------\n   })();\n   \n   </script>\n   </body>\n</html>\n```\n:::\n:::\n\n\n::: {#561757fd .cell execution_count=11}\n``` {.python .cell-code}\nbest_movie = pd.DataFrame({\n    \"movie\": [\n        \"The Phantom Menace\",\n        \"Attack of the Clones\",\n        \"Revenge of the Sith\",\n        \"A New Hope\",\n        \"The Empire Strikes Back\",\n        \"Return of the Jedi\"\n    ],\n    \"percent\": [10, 4, 6, 27, 36, 17]\n})\n(\n    ggplot(best_movie) +\n    geom_bar(\n        aes(y=\"movie\", x=\"percent\"),\n        stat=\"identity\",\n        fill=\"#1f77b4\"\n    ) +\n    ggtitle(\"What's the Best 'Star Wars' Movie?\") +\n    xlab(\"Percentage (%)\") +\n    ylab(\"\") +\n    theme_classic() +\n    theme(\n        axis_title_y=element_blank(),\n        axis_text_y=element_text(size=10)\n    ) +\n    ggsize(700, 320)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <style> html, body { margin: 0; padding: 0; } </style>\n       <script type=\"text/javascript\" data-lets-plot-script=\"library\" src=\"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.6.2/js-package/distr/lets-plot.min.js\"></script>\n   </head>\n   <body>\n          <div id=\"lTRcKB\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   const forceImmediateRender = false;\n   const responsive = false;\n   \n   let sizing = {\n       width_mode: \"MIN\",\n       height_mode: \"SCALED\",\n       width: null, \n       height: null \n   };\n   \n   const preferredWidth = document.body.dataset.letsPlotPreferredWidth;\n   if (preferredWidth !== undefined) {\n       sizing = {\n           width_mode: 'FIXED',\n           height_mode: 'SCALED',\n           width: parseFloat(preferredWidth)\n       };\n   }\n   \n   const containerDiv = document.getElementById(\"lTRcKB\");\n   let fig = null;\n   \n   function renderPlot() {\n       if (fig === null) {\n           const plotSpec = {\n\"data\":{\n\"movie\":[\"The Phantom Menace\",\"Attack of the Clones\",\"Revenge of the Sith\",\"A New Hope\",\"The Empire Strikes Back\",\"Return of the Jedi\"],\n\"percent\":[10.0,4.0,6.0,27.0,36.0,17.0]\n},\n\"mapping\":{\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"movie\"\n},{\n\"type\":\"int\",\n\"column\":\"percent\"\n}]\n},\n\"ggtitle\":{\n\"text\":\"What's the Best 'Star Wars' Movie?\"\n},\n\"guides\":{\n\"x\":{\n\"title\":\"Percentage (%)\"\n},\n\"y\":{\n\"title\":\"\"\n}\n},\n\"theme\":{\n\"name\":\"classic\",\n\"axis_title_y\":{\n\"blank\":true\n},\n\"axis_text_y\":{\n\"size\":10.0,\n\"blank\":false\n}\n},\n\"ggsize\":{\n\"width\":700.0,\n\"height\":320.0\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"bar\",\n\"stat\":\"identity\",\n\"mapping\":{\n\"x\":\"percent\",\n\"y\":\"movie\"\n},\n\"data_meta\":{\n},\n\"fill\":\"#1f77b4\",\n\"orientation\":\"y\",\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"2\"\n};\n           fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, containerDiv, sizing);\n       } else {\n           fig.updateView({});\n       }\n   }\n   \n   const renderImmediately = \n       forceImmediateRender || (\n           sizing.width_mode === 'FIXED' && \n           (sizing.height_mode === 'FIXED' || sizing.height_mode === 'SCALED')\n       );\n   \n   if (renderImmediately) {\n       renderPlot();\n   }\n   \n   if (!renderImmediately || responsive) {\n       // Set up observer for initial sizing or continuous monitoring\n       var observer = new ResizeObserver(function(entries) {\n           for (let entry of entries) {\n               if (entry.contentBoxSize && \n                   entry.contentBoxSize[0].inlineSize > 0) {\n                   if (!responsive && observer) {\n                       observer.disconnect();\n                       observer = null;\n                   }\n                   renderPlot();\n                   if (!responsive) {\n                       break;\n                   }\n               }\n           }\n       });\n       \n       observer.observe(containerDiv);\n   }\n   \n   // ----------\n   })();\n   \n   </script>\n   </body>\n</html>\n```\n:::\n:::\n\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\n_This machine learning model that predicts the chances of a person making over 50K has 60% accuracy. _\n\n::: {#3ae2b7c4 .cell execution_count=12}\n``` {.python .cell-code}\n# Include and execute your code here\ncat_cols = df.select_dtypes(include='object').columns\nprint(cat_cols)\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nfor col in cat_cols:\n    df[col] = le.fit_transform(df[col].astype(str))\nX = df.drop(columns=['income_num', 'income_gt_50k'])\ny = df['income_gt_50k']\n\nX = X.select_dtypes(include=[np.number])  # ensure all features are numeric\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier(\n    n_estimators=500,\n    max_depth=10,\n    min_samples_split=5,\n    class_weight='balanced',\n    random_state=42\n)\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['have_you_seen_any_of_the_6_films_in_the_star_wars_franchise',\n       'do_you_consider_yourself_to_be_a_fan_of_the_star_wars_film_franchise',\n       'which_of_the_following_star_wars_films_have_you_seen_please_select_all_that_apply',\n       'unnamed_4', 'unnamed_5', 'unnamed_6', 'unnamed_7', 'unnamed_8',\n       'please_rank_the_star_wars_films_in_order_of_preference_with_1_being_your_favorite_film_in_the_franchise_and_6_being_your_least_favorite_film',\n       'unnamed_10', 'unnamed_11', 'unnamed_12', 'unnamed_13', 'unnamed_14',\n       'please_state_whether_you_view_the_following_characters_favorably_unfavorably_or_are_unfamiliar_with_himher',\n       'unnamed_16', 'unnamed_17', 'unnamed_18', 'unnamed_19', 'unnamed_20',\n       'unnamed_21', 'unnamed_22', 'unnamed_23', 'unnamed_24', 'unnamed_25',\n       'unnamed_26', 'unnamed_27', 'unnamed_28', 'which_character_shot_first',\n       'are_you_familiar_with_the_expanded_universe',\n       'do_you_consider_yourself_to_be_a_fan_of_the_expanded_universe',\n       'do_you_consider_yourself_to_be_a_fan_of_the_star_trek_franchise',\n       'location_census_region'],\n      dtype='object')\nAccuracy: 0.601063829787234\n              precision    recall  f1-score   support\n\n           0       0.63      0.54      0.58        97\n           1       0.58      0.67      0.62        91\n\n    accuracy                           0.60       188\n   macro avg       0.60      0.60      0.60       188\nweighted avg       0.61      0.60      0.60       188\n\n```\n:::\n:::\n\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n::: {#c4f11986 .cell execution_count=13}\n``` {.python .cell-code}\n# Include and execute your code here\n\n```\n:::\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n::: {#c3bb5fac .cell execution_count=14}\n``` {.python .cell-code}\n# Include and execute your code here\n\nfrom plotnine import *\nprint(\"plotnine is installed and ready!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nplotnine is installed and ready!\n```\n:::\n:::\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n::: {#ba5fc336 .cell execution_count=15}\n``` {.python .cell-code}\n# Include and execute your code here\n\n```\n:::\n\n\n---\n\n",
    "supporting": [
      "project5_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}