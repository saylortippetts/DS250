{"title":"Client Report - Late Flights & Missing Data (JSON)","markdown":{"yaml":{"title":"Client Report - Late Flights & Missing Data (JSON)","subtitle":"Course DS 250","author":"[STUDENT NAME]","format":{"html":{"self-contained":true,"page-layout":"full","title-block-banner":true,"toc":true,"toc-depth":3,"toc-location":"body","number-sections":false,"html-math-method":"katex","code-fold":true,"code-summary":"Show the code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}},"execute":{"warning":false}},"headingText":"Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html","containsRefs":false,"markdown":"\n\n```{python}\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n\n\n```{python}\n\n# Include and execute your code here\ndf = pd.read_json(\"https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json\")\n```\n\n## Elevator pitch\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\n_From this summary we can learn that November is the best time to travel. We can also learn that SLC has the least amount of delays by weather._\n\n## QUESTION|TASK 1\n\n__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__ In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the \"NaN\" for at least one missing value.__  \n\n_In this question, I did a simple filtering and relpacement in order to cleanly show \"NaN\" using df.replace._\n\n```{python}\nmissing_tokens = [\"\", \" \", \"NA\", \"N/A\", \"null\", None]\ndf.replace(missing_tokens, np.nan, inplace=True)\n\nfor col in df.columns:\n    if \"num_of_\" in col or \"minutes_delayed\" in col:\n        df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n\ndf[\"month\"] = df[\"month\"].replace({\"Febuary\": \"February\"})\n\none_row_json = (\n    df.sample(1)\n      .replace({np.nan: \"NaN\"})\n      .to_json(orient=\"records\", indent=2)\n)\n\none_row_json\n\n\n\n```\n\n\n## QUESTION|TASK 2\n\n__Which airport has the worst delays?__ Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.   \n\n_For this table, I decided to look into the avgerage delay hours by airport to be able to easily see which airport was doing the worst. I used lambda to do this._\n\n```{python}\n\nsummary = (\n    df.groupby(\"airport_code\", dropna=True)\n      .agg(\n          total_flights   = (\"num_of_flights_total\", \"sum\"),\n          avg_delay_mins  = (\"minutes_delayed_total\", \"mean\")\n      )\n      .assign(\n          avg_delay_hrs = lambda d: d.avg_delay_mins / 60\n      )\n      .drop(columns=\"avg_delay_mins\")\n      .sort_values(\"avg_delay_hrs\", ascending=False)\n)\n\nsummary.head()\n\n\n\n```\n\n\n\n## QUESTION|TASK 3\n\n__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the `Month` variable.)  \n\n_I did he same type of averaging idea for this question, but I averaged by month. It can clearly be seen that the best month to go is in November, due to the low amount of delays comparatively._\n\n```{python}\n# Drop rows with missing months\nmonth_df = df.dropna(subset=[\"month\"])\n\nmonth_tbl = (\n    month_df.groupby(\"month\")\n      .agg(avg_delay_mins=(\"minutes_delayed_total\", \"mean\"))\n      .reset_index()\n)\n\n\nmonth_order = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n]\n\nmonth_tbl[\"month\"] = pd.Categorical(month_tbl[\"month\"], categories=month_order, ordered=True)\nmonth_tbl[\"avg_delay_hrs\"] = month_tbl[\"avg_delay_mins\"] / 60\nmonth_tbl = month_tbl.sort_values(\"month\")\n\nfrom lets_plot import *\n\nggplot(month_tbl) + \\\n    geom_bar(aes(x=\"month\", y=\"avg_delay_hrs\"), stat=\"identity\", fill=\"#1f77b4\") + \\\n    ggtitle(\"Average Delay Time by Month (in Hours)\") + \\\n    xlab(\"Month\") + ylab(\"Avg Delay (Hours)\") + \\\n    theme(axis_text_x=element_text(angle=45, hjust=1)) + \\\n    ggsize(700, 350)\n\n\n\n```\n\n\n\n## QUESTION|TASK 4\n\nAccording to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. __Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__ You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:  \n\n    a. 100% of delayed flights in the Weather category are due to weather  \n    a. 30% of all delayed flights in the Late-Arriving category are due to weather  \n    a. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    \n\n_This analysis is able to take a deeper look into possible different weather delays that are not just severe. From this, we can see that ATL has the most delays. _\n\n```{python}\n# Include and execute your code here\n# Make sure values are numeric\nfor col in [\"num_of_delays_weather\", \"num_of_delays_late_aircraft\", \"num_of_delays_nas\"]:\n    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n\n# Fill missing late aircraft delays with column mean\ndf[\"num_of_delays_late_aircraft\"].fillna(df[\"num_of_delays_late_aircraft\"].mean(), inplace=True)\n\n\n```\n\n\n```{python}\n# Include and execute your code here\n\ndef compute_weather(row):\n    weather = row[\"num_of_delays_weather\"] or 0\n    late_aircraft = 0.30 * row[\"num_of_delays_late_aircraft\"]\n    \n\n    spring_summer = [\"April\", \"May\", \"June\", \"July\", \"August\"]\n    nas_pct = 0.40 if row[\"month\"] in spring_summer else 0.65\n    nas = nas_pct * (row[\"num_of_delays_nas\"] or 0)\n    \n    return weather + late_aircraft + nas\n\ndf[\"weather_all\"] = df.apply(compute_weather, axis=1)\n\n```\n\n\n```{python}\n# Include and execute your code here\ndf[[\n    \"airport_code\", \"month\",\n    \"num_of_delays_weather\", \"num_of_delays_late_aircraft\", \"num_of_delays_nas\",\n    \"weather_all\"\n]].head()\n\n```\n\n\n\n## QUESTION|TASK 5\n\n__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__  \n\n_SFO has the most delays from weather that are mild and severe._\n```{python}\n# Include and execute your code here\ndf[\"weather_delay_prop\"] = df[\"weather_all\"] / df[\"num_of_flights_total\"]\n\nweather_by_airport = (\n    df.groupby(\"airport_code\", dropna=True)\n      .agg(prop_weather_delay=(\"weather_delay_prop\", \"mean\"))\n      .reset_index()\n      .sort_values(\"prop_weather_delay\", ascending=False)\n)\n\nfrom lets_plot import *\n\n(ggplot(weather_by_airport) +\n geom_bar(aes(x=\"airport_code\",\n              y=\"prop_weather_delay\"),\n          stat=\"identity\",\n          fill=\"#1f77b4\") +\n ggtitle(\"Proportion of Flights Delayed by Weather (Severe + Mild)\") +\n xlab(\"Airport\") + ylab(\"Proportion delayed\") +\n theme(axis_text_x=element_text(angle=45, hjust=1)) +\n ggsize(700, 400))\n\n\n```\n\n\n---\n\n\n## STRETCH QUESTION|TASK 1\n\n__Which delay is the worst delay?__ Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n---\n\n","srcMarkdownNoYaml":"\n\n```{python}\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n\n\n```{python}\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_json(\"https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json\")\n```\n\n## Elevator pitch\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\n_From this summary we can learn that November is the best time to travel. We can also learn that SLC has the least amount of delays by weather._\n\n## QUESTION|TASK 1\n\n__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__ In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the \"NaN\" for at least one missing value.__  \n\n_In this question, I did a simple filtering and relpacement in order to cleanly show \"NaN\" using df.replace._\n\n```{python}\nmissing_tokens = [\"\", \" \", \"NA\", \"N/A\", \"null\", None]\ndf.replace(missing_tokens, np.nan, inplace=True)\n\nfor col in df.columns:\n    if \"num_of_\" in col or \"minutes_delayed\" in col:\n        df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n\ndf[\"month\"] = df[\"month\"].replace({\"Febuary\": \"February\"})\n\none_row_json = (\n    df.sample(1)\n      .replace({np.nan: \"NaN\"})\n      .to_json(orient=\"records\", indent=2)\n)\n\none_row_json\n\n\n\n```\n\n\n## QUESTION|TASK 2\n\n__Which airport has the worst delays?__ Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.   \n\n_For this table, I decided to look into the avgerage delay hours by airport to be able to easily see which airport was doing the worst. I used lambda to do this._\n\n```{python}\n\nsummary = (\n    df.groupby(\"airport_code\", dropna=True)\n      .agg(\n          total_flights   = (\"num_of_flights_total\", \"sum\"),\n          avg_delay_mins  = (\"minutes_delayed_total\", \"mean\")\n      )\n      .assign(\n          avg_delay_hrs = lambda d: d.avg_delay_mins / 60\n      )\n      .drop(columns=\"avg_delay_mins\")\n      .sort_values(\"avg_delay_hrs\", ascending=False)\n)\n\nsummary.head()\n\n\n\n```\n\n\n\n## QUESTION|TASK 3\n\n__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the `Month` variable.)  \n\n_I did he same type of averaging idea for this question, but I averaged by month. It can clearly be seen that the best month to go is in November, due to the low amount of delays comparatively._\n\n```{python}\n# Drop rows with missing months\nmonth_df = df.dropna(subset=[\"month\"])\n\nmonth_tbl = (\n    month_df.groupby(\"month\")\n      .agg(avg_delay_mins=(\"minutes_delayed_total\", \"mean\"))\n      .reset_index()\n)\n\n\nmonth_order = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n]\n\nmonth_tbl[\"month\"] = pd.Categorical(month_tbl[\"month\"], categories=month_order, ordered=True)\nmonth_tbl[\"avg_delay_hrs\"] = month_tbl[\"avg_delay_mins\"] / 60\nmonth_tbl = month_tbl.sort_values(\"month\")\n\nfrom lets_plot import *\n\nggplot(month_tbl) + \\\n    geom_bar(aes(x=\"month\", y=\"avg_delay_hrs\"), stat=\"identity\", fill=\"#1f77b4\") + \\\n    ggtitle(\"Average Delay Time by Month (in Hours)\") + \\\n    xlab(\"Month\") + ylab(\"Avg Delay (Hours)\") + \\\n    theme(axis_text_x=element_text(angle=45, hjust=1)) + \\\n    ggsize(700, 350)\n\n\n\n```\n\n\n\n## QUESTION|TASK 4\n\nAccording to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. __Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__ You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:  \n\n    a. 100% of delayed flights in the Weather category are due to weather  \n    a. 30% of all delayed flights in the Late-Arriving category are due to weather  \n    a. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    \n\n_This analysis is able to take a deeper look into possible different weather delays that are not just severe. From this, we can see that ATL has the most delays. _\n\n```{python}\n# Include and execute your code here\n# Make sure values are numeric\nfor col in [\"num_of_delays_weather\", \"num_of_delays_late_aircraft\", \"num_of_delays_nas\"]:\n    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n\n# Fill missing late aircraft delays with column mean\ndf[\"num_of_delays_late_aircraft\"].fillna(df[\"num_of_delays_late_aircraft\"].mean(), inplace=True)\n\n\n```\n\n\n```{python}\n# Include and execute your code here\n\ndef compute_weather(row):\n    weather = row[\"num_of_delays_weather\"] or 0\n    late_aircraft = 0.30 * row[\"num_of_delays_late_aircraft\"]\n    \n\n    spring_summer = [\"April\", \"May\", \"June\", \"July\", \"August\"]\n    nas_pct = 0.40 if row[\"month\"] in spring_summer else 0.65\n    nas = nas_pct * (row[\"num_of_delays_nas\"] or 0)\n    \n    return weather + late_aircraft + nas\n\ndf[\"weather_all\"] = df.apply(compute_weather, axis=1)\n\n```\n\n\n```{python}\n# Include and execute your code here\ndf[[\n    \"airport_code\", \"month\",\n    \"num_of_delays_weather\", \"num_of_delays_late_aircraft\", \"num_of_delays_nas\",\n    \"weather_all\"\n]].head()\n\n```\n\n\n\n## QUESTION|TASK 5\n\n__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__  \n\n_SFO has the most delays from weather that are mild and severe._\n```{python}\n# Include and execute your code here\ndf[\"weather_delay_prop\"] = df[\"weather_all\"] / df[\"num_of_flights_total\"]\n\nweather_by_airport = (\n    df.groupby(\"airport_code\", dropna=True)\n      .agg(prop_weather_delay=(\"weather_delay_prop\", \"mean\"))\n      .reset_index()\n      .sort_values(\"prop_weather_delay\", ascending=False)\n)\n\nfrom lets_plot import *\n\n(ggplot(weather_by_airport) +\n geom_bar(aes(x=\"airport_code\",\n              y=\"prop_weather_delay\"),\n          stat=\"identity\",\n          fill=\"#1f77b4\") +\n ggtitle(\"Proportion of Flights Delayed by Weather (Severe + Mild)\") +\n xlab(\"Airport\") + ylab(\"Proportion delayed\") +\n theme(axis_text_x=element_text(angle=45, hjust=1)) +\n ggsize(700, 400))\n\n\n```\n\n\n---\n\n\n## STRETCH QUESTION|TASK 1\n\n__Which delay is the worst delay?__ Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n---\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"self-contained":true,"toc-depth":3,"number-sections":false,"html-math-method":"katex","output-file":"P3_template.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly","dark":"darkly"},"title":"Client Report - Late Flights & Missing Data (JSON)","subtitle":"Course DS 250","author":"[STUDENT NAME]","page-layout":"full","title-block-banner":true,"toc-location":"body","code-summary":"Show the code","code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}