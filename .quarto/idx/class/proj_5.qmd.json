{"title":"Client Report - The War with Star Wars","markdown":{"yaml":{"title":"Client Report - The War with Star Wars","subtitle":"Course DS 250","author":"Saylor Tippetts","format":{"html":{"self-contained":true,"page-layout":"full","title-block-banner":true,"toc":true,"toc-depth":3,"toc-location":"body","number-sections":false,"html-math-method":"katex","code-fold":true,"code-summary":"Show the code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}},"execute":{"warning":false}},"headingText":"Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html","containsRefs":false,"markdown":"\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport re\nfrom lets_plot import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n\n\n```{python}\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL\n# Load the dataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv\",\n    encoding=\"ISO-8859-1\"\n)\n```\n\n## Elevator pitch\n_In this project, I was able to analyze Star Wars survey data to explore fan demographics. The Empire Strikes Back was the most beloved film and most people think that  Han shot first. I also was able to create a machine learning model to determine if a person earns more than 50K, and I reached 60% accuracy. _\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\n_In this portion, I just went ahead and cleaned up the cleaned up names. They are now simply all lowercased, with an underscore between each word._\n\n```{python}\n# Include and execute your code here\ndf.columns = [re.sub(r'[^a-zA-Z0-9_]', '', c.strip().lower().replace(\" \", \"_\")) for c in df.columns]\ndf.columns[:10]\n\n```\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\ndf = df[df['have_you_seen_any_of_the_6_films_in_the_star_wars_franchise'] == 'Yes']\n\n```\n\n```{python}\n# Include and execute your code here\nage_map = {\"18-29\": 24, \"30-44\": 37, \"45-60\": 52, \"> 60\": 65}\ndf['age_num'] = df['age'].map(age_map)\ndf.drop(columns=['age'], inplace=True)\n\n```\n\n```{python}\n# Include and execute your code here\nedu_map = {\n    \"Less than high school degree\": 1,\n    \"High school degree\": 2,\n    \"Some college or Associate degree\": 3,\n    \"Bachelor degree\": 4,\n    \"Graduate degree\": 5,\n}\ndf['education_num'] = df['education'].map(edu_map)\ndf.drop(columns=['education'], inplace=True)\n\n```\n\n```{python}\n# Include and execute your code here\nincome_map = {\n    \"$0 - $24,999\": 12500,\n    \"$25,000 - $49,999\": 37500,\n    \"$50,000 - $99,999\": 75000,\n    \"$100,000 - $149,999\": 125000,\n    \"$150,000+\": 175000,\n}\ndf['income_num'] = df['household_income'].map(income_map)\ndf.drop(columns=['household_income'], inplace=True)\n\n```\n\n```{python}\n# Include and execute your code here\n\ndf['income_gt_50k'] = (df['income_num'] > 50000).astype(int)\n\n```\n\n```{python}\n# Include and execute your code here\ncategorical_cols = [col for col in ['gender', 'location'] if col in df.columns]\ndf = pd.get_dummies(df, columns=categorical_cols, drop_first=True)\n\n```\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\n_I used ggPlot to recreate the \"Who Shot First\" graph and \"Whats the best Star Wars movie?\" graph._\n\n\n```{python}\ndata = pd.DataFrame({\n    'response': [\"Han\", \"Greedo\", \"I don't understand this question\"],\n    'percent': [39, 24, 37]\n})\nggplot(data) + \\\n    geom_bar(aes(y='response', x='percent'), stat='identity', fill='#1f77b4') + \\\n    ggtitle(\"Who Shot First?\") + \\\n    xlab(\"Percentage (%)\") + \\\n    ylab(\"\") + \\\n    theme_classic() + \\\n    theme(axis_title_y=element_blank()) + \\\n    ggsize(900, 300) \n\n\n```\n\n```{python}\nbest_movie = pd.DataFrame({\n    \"movie\": [\n        \"The Phantom Menace\",\n        \"Attack of the Clones\",\n        \"Revenge of the Sith\",\n        \"A New Hope\",\n        \"The Empire Strikes Back\",\n        \"Return of the Jedi\"\n    ],\n    \"percent\": [10, 4, 6, 27, 36, 17]\n})\n(\n    ggplot(best_movie) +\n    geom_bar(\n        aes(y=\"movie\", x=\"percent\"),\n        stat=\"identity\",\n        fill=\"#1f77b4\"\n    ) +\n    ggtitle(\"What's the Best 'Star Wars' Movie?\") +\n    xlab(\"Percentage (%)\") +\n    ylab(\"\") +\n    theme_classic() +\n    theme(\n        axis_title_y=element_blank(),\n        axis_text_y=element_text(size=10)\n    ) +\n    ggsize(700, 320)\n)\n```\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\n_This machine learning model that predicts the chances of a person making over 50K has 60% accuracy. _\n\n```{python}\n# Include and execute your code here\ncat_cols = df.select_dtypes(include='object').columns\nprint(cat_cols)\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nfor col in cat_cols:\n    df[col] = le.fit_transform(df[col].astype(str))\nX = df.drop(columns=['income_num', 'income_gt_50k'])\ny = df['income_gt_50k']\n\nX = X.select_dtypes(include=[np.number])  # ensure all features are numeric\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier(\n    n_estimators=500,\n    max_depth=10,\n    min_samples_split=5,\n    class_weight='balanced',\n    random_state=42\n)\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n```\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n---\n","srcMarkdownNoYaml":"\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport re\nfrom lets_plot import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\nLetsPlot.setup_html(isolated_frame=True)\n```\n\n\n```{python}\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL\n# Load the dataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv\",\n    encoding=\"ISO-8859-1\"\n)\n```\n\n## Elevator pitch\n_In this project, I was able to analyze Star Wars survey data to explore fan demographics. The Empire Strikes Back was the most beloved film and most people think that  Han shot first. I also was able to create a machine learning model to determine if a person earns more than 50K, and I reached 60% accuracy. _\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\n_In this portion, I just went ahead and cleaned up the cleaned up names. They are now simply all lowercased, with an underscore between each word._\n\n```{python}\n# Include and execute your code here\ndf.columns = [re.sub(r'[^a-zA-Z0-9_]', '', c.strip().lower().replace(\" \", \"_\")) for c in df.columns]\ndf.columns[:10]\n\n```\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\ndf = df[df['have_you_seen_any_of_the_6_films_in_the_star_wars_franchise'] == 'Yes']\n\n```\n\n```{python}\n# Include and execute your code here\nage_map = {\"18-29\": 24, \"30-44\": 37, \"45-60\": 52, \"> 60\": 65}\ndf['age_num'] = df['age'].map(age_map)\ndf.drop(columns=['age'], inplace=True)\n\n```\n\n```{python}\n# Include and execute your code here\nedu_map = {\n    \"Less than high school degree\": 1,\n    \"High school degree\": 2,\n    \"Some college or Associate degree\": 3,\n    \"Bachelor degree\": 4,\n    \"Graduate degree\": 5,\n}\ndf['education_num'] = df['education'].map(edu_map)\ndf.drop(columns=['education'], inplace=True)\n\n```\n\n```{python}\n# Include and execute your code here\nincome_map = {\n    \"$0 - $24,999\": 12500,\n    \"$25,000 - $49,999\": 37500,\n    \"$50,000 - $99,999\": 75000,\n    \"$100,000 - $149,999\": 125000,\n    \"$150,000+\": 175000,\n}\ndf['income_num'] = df['household_income'].map(income_map)\ndf.drop(columns=['household_income'], inplace=True)\n\n```\n\n```{python}\n# Include and execute your code here\n\ndf['income_gt_50k'] = (df['income_num'] > 50000).astype(int)\n\n```\n\n```{python}\n# Include and execute your code here\ncategorical_cols = [col for col in ['gender', 'location'] if col in df.columns]\ndf = pd.get_dummies(df, columns=categorical_cols, drop_first=True)\n\n```\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\n_I used ggPlot to recreate the \"Who Shot First\" graph and \"Whats the best Star Wars movie?\" graph._\n\n\n```{python}\ndata = pd.DataFrame({\n    'response': [\"Han\", \"Greedo\", \"I don't understand this question\"],\n    'percent': [39, 24, 37]\n})\nggplot(data) + \\\n    geom_bar(aes(y='response', x='percent'), stat='identity', fill='#1f77b4') + \\\n    ggtitle(\"Who Shot First?\") + \\\n    xlab(\"Percentage (%)\") + \\\n    ylab(\"\") + \\\n    theme_classic() + \\\n    theme(axis_title_y=element_blank()) + \\\n    ggsize(900, 300) \n\n\n```\n\n```{python}\nbest_movie = pd.DataFrame({\n    \"movie\": [\n        \"The Phantom Menace\",\n        \"Attack of the Clones\",\n        \"Revenge of the Sith\",\n        \"A New Hope\",\n        \"The Empire Strikes Back\",\n        \"Return of the Jedi\"\n    ],\n    \"percent\": [10, 4, 6, 27, 36, 17]\n})\n(\n    ggplot(best_movie) +\n    geom_bar(\n        aes(y=\"movie\", x=\"percent\"),\n        stat=\"identity\",\n        fill=\"#1f77b4\"\n    ) +\n    ggtitle(\"What's the Best 'Star Wars' Movie?\") +\n    xlab(\"Percentage (%)\") +\n    ylab(\"\") +\n    theme_classic() +\n    theme(\n        axis_title_y=element_blank(),\n        axis_text_y=element_text(size=10)\n    ) +\n    ggsize(700, 320)\n)\n```\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\n_This machine learning model that predicts the chances of a person making over 50K has 60% accuracy. _\n\n```{python}\n# Include and execute your code here\ncat_cols = df.select_dtypes(include='object').columns\nprint(cat_cols)\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nfor col in cat_cols:\n    df[col] = le.fit_transform(df[col].astype(str))\nX = df.drop(columns=['income_num', 'income_gt_50k'])\ny = df['income_gt_50k']\n\nX = X.select_dtypes(include=[np.number])  # ensure all features are numeric\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier(\n    n_estimators=500,\n    max_depth=10,\n    min_samples_split=5,\n    class_weight='balanced',\n    random_state=42\n)\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n```\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n```{python}\n# Include and execute your code here\n\n\n```\n\n---\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"self-contained":true,"toc-depth":3,"number-sections":false,"html-math-method":"katex","output-file":"proj_5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly","dark":"darkly"},"title":"Client Report - The War with Star Wars","subtitle":"Course DS 250","author":"Saylor Tippetts","page-layout":"full","title-block-banner":true,"toc-location":"body","code-summary":"Show the code","code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}